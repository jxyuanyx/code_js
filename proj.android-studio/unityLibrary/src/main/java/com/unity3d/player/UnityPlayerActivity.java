// GENERATED BY UNITY. REMOVE THIS COMMENT TO PREVENT OVERWRITING WHEN EXPORTING AGAIN
package com.unity3d.player;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.AlertDialog;
import android.content.ComponentName;
import android.content.Context;
import android.content.ContextWrapper;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.res.AssetManager;
import android.content.res.Configuration;
import android.graphics.PixelFormat;
import android.os.Bundle;
import android.os.Vibrator;
import android.provider.Settings;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.Window;
import android.view.WindowManager;
import android.os.Process;
import android.widget.FrameLayout;
import android.widget.ImageView;

import com.google.gson.Gson;

import org.json.JSONObject;

import java.io.File;
import java.lang.reflect.Array;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.List;

import io.github.noodle1983.Boostrap;
import platform.imp.PlatformService;

public class UnityPlayerActivity extends Activity implements IUnityPlayerLifecycleEvents
{
    protected UnityPlayer mUnityPlayer; // don't change the name of this variable; referenced from native code

    // Override this in your custom UnityPlayerActivity to tweak the command line arguments passed to the Unity Android Player
    // The command line arguments are passed as a string, separated by spaces
    // UnityPlayerActivity calls this from 'onCreate'
    // Supported: -force-gles20, -force-gles30, -force-gles31, -force-gles31aep, -force-gles32, -force-gles, -force-vulkan
    // See https://docs.unity3d.com/Manual/CommandLineArguments.html
    // @param cmdLine the current command line arguments, may be null
    // @return the modified command line string or null
    protected String updateUnityCommandLineArguments(String cmdLine)
    {
        return cmdLine;
    }

    private  ImageView sSplashBgImageView = null;

    private final String UPLOAD_RESULT="uploadResult";
    private final String UPLOAD_SCORE="uploadScore";
    private final String UPLOAD_PLAYTIME="uploadPlayTime";
    private final String GAMEISFINISH = "gameisfinish";
    private final String GAMEKILLCOUNT = "gamekillcount";

    private GameResult _gameResult;

    // Setup activity layout
    @Override protected void onCreate(Bundle savedInstanceState)
    {
        requestWindowFeature(Window.FEATURE_NO_TITLE);
        super.onCreate(savedInstanceState);
        Bundle bundle=getIntent().getExtras();

        //unity热更处理
        String initPath=getApplicationContext().getFilesDir().getPath();
        Boostrap.InitNativeLibBeforeUnityPlay(initPath);
        Boostrap.usedatadir(bundle.getString("unityCommonPath"),getPackageName());
        Boostrap.hook();

        String cmdLine = updateUnityCommandLineArguments(getIntent().getStringExtra("unity"));
        getIntent().putExtra("unity", cmdLine);

        mUnityPlayer = new UnityPlayer(this, this);
        setContentView(mUnityPlayer);
        mUnityPlayer.requestFocus();


        String splashPath=bundle.getString("splashPath");

        //添加开屏页
        sSplashBgImageView = PlatformService.getInstance().showSplash(splashPath,this);

        this._sendStartGame(bundle.getString("gameInfo"));
        this._setGameInfo(bundle.getString("uid"));


        //getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
        PlatformService.getInstance().checkAdb(this);
    }

    // When Unity player unloaded move task to background
    @Override public void onUnityPlayerUnloaded()
    {
        moveTaskToBack(true);
    }

    // When Unity player quited kill process
    @Override public void onUnityPlayerQuitted() {
        Process.killProcess(Process.myPid());
    }

    private void _sendStartGame(String gameInfo){
        _gameResult=new GameResult();
        _gameResult.gameInfo=gameInfo;
        _gameResult.scores="";
        UnityPlayer.UnitySendMessage("BuTongSdk","setStartGameUploadCompelte",gameInfo);
    }

    private void _sendStartGame(){
        String gameInfo=PlatformService.getInstance().get_currentGame();
        System.out.println("gameInfo>>>>>>>:"+gameInfo);
        UnityPlayer.UnitySendMessage("BuTongSdk","setStartGameUploadCompelte",gameInfo);
    }

    private void _setGameInfo(String uid){
        this._gameResult.uid=uid;
    }

    @Override protected void onNewIntent(Intent intent)
    {
        // To support deep linking, we need to make sure that the client can get access to
        // the last sent intent. The clients access this through a JNI api that allows them
        // to get the intent set on launch. To update that after launch we have to manually
        // replace the intent with the one caught here.
        setIntent(intent);
        mUnityPlayer.newIntent(intent);
        //this._sendStartGame();
    }

    // Quit Unity
    @Override protected void onDestroy ()
    {
        mUnityPlayer.destroy();
        super.onDestroy();
    }

    // Pause Unity
    @Override protected void onPause()
    {
        super.onPause();
        mUnityPlayer.pause();
    }

    // Resume Unity
    @Override protected void onResume()
    {
        super.onResume();
        mUnityPlayer.resume();
        PlatformService.getInstance().checkAdb(this);
    }

    // Low Memory Unity
    @Override public void onLowMemory()
    {
        super.onLowMemory();
        mUnityPlayer.lowMemory();
    }

    // Trim Memory Unity
    @Override public void onTrimMemory(int level)
    {
        super.onTrimMemory(level);
        if (level == TRIM_MEMORY_RUNNING_CRITICAL)
        {
            mUnityPlayer.lowMemory();
        }
    }

    // This ensures the layout will be correct.
    @Override public void onConfigurationChanged(Configuration newConfig)
    {
        super.onConfigurationChanged(newConfig);
        mUnityPlayer.configurationChanged(newConfig);
    }

    // Notify Unity of the focus change.
    @Override public void onWindowFocusChanged(boolean hasFocus)
    {
        super.onWindowFocusChanged(hasFocus);
        mUnityPlayer.windowFocusChanged(hasFocus);
    }

    // For some reason the multiple keyevent type is not supported by the ndk.
    // Force event injection by overriding dispatchKeyEvent().
    @Override public boolean dispatchKeyEvent(KeyEvent event)
    {
        if (event.getAction() == KeyEvent.ACTION_MULTIPLE)
            return mUnityPlayer.injectEvent(event);
        return super.dispatchKeyEvent(event);
    }

    // Pass any events not handled by (unfocused) views straight to UnityPlayer
    @Override public boolean onKeyUp(int keyCode, KeyEvent event)     { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onKeyDown(int keyCode, KeyEvent event)   { return mUnityPlayer.injectEvent(event); }
    @Override public boolean onTouchEvent(MotionEvent event)          { return mUnityPlayer.injectEvent(event); }
    /*API12*/ public boolean onGenericMotionEvent(MotionEvent event)  { return mUnityPlayer.injectEvent(event); }

    ////////////////////////////////////////////////////////////////////////////////Unity调原生////////////////////////////////////////////////////////////////////////////////////
    /**
     * 震动
     * @param type 0 轻度， 1 重度
     */
    public void StartShock(int type){
        Vibrator  vibrator = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);
        long [] pattern = new long[] {0, 40};   // 停止 开启 停止 开启
        if(type == 1)
        {
            pattern = new long[] {0, 80, 0, 80};
        }
        vibrator.vibrate(pattern, -1);
    }

    public  void shockByCustom(String data){
        Vibrator  vibrator = (Vibrator) this.getSystemService(Context.VIBRATOR_SERVICE);
        String[] shockData=data.split("#");
        long [] pattern = new long[shockData.length];
        for(int i=0;i<shockData.length;i++){
            pattern[i]=Long.parseLong(shockData[i]);
        }
        vibrator.vibrate(pattern,-1);
    }

    public void hideSplash(){
        System.out.println(">>>>>>hides>>>>>>");
        this.runOnUiThread(new Runnable() {
            @Override
            public void run() {
                sSplashBgImageView.setVisibility(View.GONE);
            }
        });
    }

    public boolean checkProcessExsit() {
        ActivityManager am = ((ActivityManager) getSystemService(Context.ACTIVITY_SERVICE));
        List<ActivityManager.RunningAppProcessInfo> processInfos = am.getRunningAppProcesses();
        String mainProcessName = getPackageName();
        for (ActivityManager.RunningAppProcessInfo info : processInfos) {
            System.out.println("ssssssss:::::::"+mainProcessName+"-----"+info.processName);
            if (mainProcessName.equals(info.processName)) {
                return true;
            }
        }
        return false;
    }

    private void _checkPlat(){
        if(!this.checkProcessExsit()){
            //重启应用
            Intent intent = getBaseContext().getPackageManager().getLaunchIntentForPackage(getBaseContext().getPackageName());
            intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            intent.putExtra("REBOOT","reboot");
            startActivity(intent);
        }
        finish();
    }

    public void sendMessageToPlatform(String action,String data){

        switch (action){
            case UPLOAD_SCORE:
                this._gameResult.scores+=data+"#";
                break;
            case UPLOAD_PLAYTIME:
                this._gameResult.playTime=data;
                break;
            case GAMEISFINISH:
                this._gameResult.finish=data;
                System.out.println("this._gameResult.finish>>>>:"+this._gameResult.finish);
                break;
            case GAMEKILLCOUNT:
                this._gameResult.kills=data;
                System.out.println("this._gameResult.kills>>>>:"+this._gameResult.kills);
                break;
            case UPLOAD_RESULT:
                try{
                    this._gameResult.steps= URLEncoder.encode(data,"utf-8");
                    String key="sk_rs_"+this._gameResult.uid;
                    Gson gson=new Gson();
                    String saveData=gson.toJson(this._gameResult);
                    PlatformService.getInstance().saveSharedData(this,key,saveData);
                    System.out.println("gameResult>>>>>1111>:"+key);
                    System.out.println("gameResult>>>>>>:"+gson.toJson(this._gameResult));
                    //关闭游戏，结果回平台处理
                    this._checkPlat();
                }catch (Exception e){

                }

                break;
        }

        /*
        System.out.println("sendMessageToPlatform:"+this.getString(R.string.receiver_u2c)+"___"+data);
        Intent intent=new Intent(this.getString(R.string.receiver_u2c));
        intent.putExtra("action",action);
        intent.putExtra("data",data);
        intent.setComponent(new ComponentName("com.mn.skillmaster","org.cocos2dx.javascript.UnityDataReceiver"));
        this.sendBroadcast(intent);*/
    }
}
